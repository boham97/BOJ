from collections import deque


def start():
    for i in range(n):
        for j in range(n - 2):
            if arr[i][j] == arr[i][j + 1] == arr[i][j + 2] == 'B':
                arr[i][j], arr[i][j + 1], arr[i][j + 2] = '0', '0', '0'
                visit[0][i][j + 1] = 1
                que.append((i, j + 1, 0, 0))
                return
            elif arr[j][i] == arr[j + 1][i] == arr[j + 2][i] == 'B':
                arr[j][i], arr[j + 1][i], arr[j + 2][i] = '0', '0', '0'
                que.append((j + 1, i, 1, 0))
                return


def find_end():
    for i in range(n):
        for j in range(n):
            if arr[i][j] == 'E':
                if i + 1 < n and arr[i + 1][j] == 'E':
                    return (i + 1, j, 1)
                elif j + 1 < n and arr[i][j + 1] == 'E':
                    return (i, j + 1, 0)
def bfs():
    while que:
        x, y, p, t = que.popleft()
        if (x, y, p) == finish:
            print(t)
            break
        if p == 0 and y + 2 < n and arr[x][y + 2] != '1' and visit[0][x][y + 1] == 0:
            visit[p][x][y + 1] = 1
            que.append((x, y + 1, 0, t + 1))
        if p == 0 and y - 2 >= 0 and arr[x][y - 2] != '1' and visit[0][x][y - 1] == 0:
            visit[p][x][y - 1] = 1
            que.append((x, y - 1, 0, t + 1))
        if p == 0 and x + 1 < n and visit[p][x + 1][y] == 0 and '1' not in (arr[x + 1][y - 1], arr[x + 1][y], arr[x + 1][y + 1]):
            visit[p][x + 1][y] = 1
            que.append((x + 1, y, 0, t + 1))
        if p == 0 and x - 1 >= 0 and visit[p][x - 1][y] == 0 and '1' not in (arr[x - 1][y - 1], arr[x - 1][y], arr[x - 1][y + 1]):
            visit[p][x - 1][y] = 1
            que.append((x - 1, y, 0, t + 1))
        #세로
        if p == 1 and x + 2 < n and arr[x + 2][y] != '1' and visit[1][x + 1][y] == 0:
            visit[1][x + 1][y] = 1
            que.append((x + 1, y, 1, t + 1))
        if p == 1 and x - 2 >= 0 and arr[x - 2][y] != '1' and visit[1][x - 1][y] == 0:
            visit[1][x - 1][y] = 1
            que.append((x - 1, y, 1, t + 1))
        if p == 1 and y + 1 < n and visit[p][x][y + 1] == 0 and '1' not in (arr[x - 1][y + 1], arr[x][y + 1], arr[x + 1][y + 1]):
            visit[p][x][y + 1] = 1
            que.append((x, y + 1, 1, t + 1))
        if p == 1 and y - 1 >= 0 and visit[p][x][y - 1] == 0 and '1' not in (arr[x - 1][y - 1], arr[x][y - 1], arr[x + 1][y - 1]):
            visit[p][x][y - 1] = 1
            que.append((x, y - 1, 1, t + 1))
            
        if visit[(p + 1)%2][x][y] == 0:
            cnt = 0
            for i in range(3):
                for j in range(3):
                    if 0 <= x + i - 1 < n and 0 <= y + j - 1 < n and arr[x + i - 1][y + j - 1] != '1':
                        cnt += 1
                    else:
                        break
            if cnt == 9:
                que.append((x, y, (p + 1)%2, t + 1))
                visit[(p+1)%2][x][y] = 1
    else:
        print(0)

              
n = int(input())
arr = [list(input().rstrip())for _ in range(n)]
que = deque()
visit = [[[0] * n for _ in range(n)] for _ in range(2)]
finish = find_end()
start()
bfs()
